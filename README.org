* BLIP

Bid-request Capture Utility (or "Bid Logging In the Pipe" for backronym lovers)

** Description

*Blip* is a Python utility for capturing network traffic from a
network device or [[http://www.tcpdump.org/pcap/pcap.html][pcap]] file, extracting the [[https://github.com/google/protobuf][Protobuf]] or [[http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf][JSON]] payloads,
and storing them to disk.  Blip uses [[https://github.com/CoreSecurity/pcapy][Pcapy]], a fast libpcap interface
and [[https://github.com/kbandla/dpkt][dpkt]], a fast and simple packet manipulation library.

*Blip* also includes a pretty-printer named ~blip_showdb~, which can
read and print ~blip~'s binary output.

** Setup Requirements

*** Basic Setup

#+BEGIN_SRC sh
cd "$REPOPATH" # Where $REPOPATH is the path to the blip repository.
sudo python3 setup.py install
#+END_SRC

Pcapy (libpcap) requires root privileges (or the appropriate
permissions); we recommend requesting ~sudo~ permissions from your
local system administrator.

**** External Dependencies

blip requires the ~libpcap~ development files to filter packets from a
network device or PCAP file. It also requires ~gcc~ to compile the
interface between Python and ~libpcap~.

*** Recommended Setup

It is recommended to install the application inside a virtualenv.

#+BEGIN_SRC sh
virtualenv -p python3 "$DIRNAME" # Where $DIRNAME is the desired virtenv path.
cd "$DIRNAME"
source bin/activate
cp -r "$REPOPATH" "$DIRNAME" # Where $REPOPATH is the path of your repository.
# Cloning the git repository locally instead of copying it is also an option.
cd "$REPONAME" # Where $REPONAME is the name of the directory you copied.
sudo python3 setup.py install
#+END_SRC

This prepares a clean environment for running ~blip~ without
interference from any other libraries installed on the system.

To return shell variables to their original state, run ~deactivate~.

*** pip3 Installation

It is also possible to install the project only via pip3, though this
method is deprecated due to the availability of better tooling via
[[http://setuptools.readthedocs.io/en/latest/index.html][setuptools]].

#+BEGIN_SRC sh
pip3 install -r blip/requirements.txt
#+END_SRC


** Examples

/Warning: Each example assumes your shell is within the virtualenv's
root directory./

Note: ~sudo~ is used for convenience's sake, as an account with
administrative or root permissions would work just as well.

*Example 1*
#+BEGIN_SRC sh
sudo bin/blip -d wlp4s0 -o /tmp/output.bin
#+END_SRC
This command captures packets from wlp4s0 (a wireless device) and
writes the extracted data to ~/tmp/output.bin~.

*Example 2*
#+BEGIN_SRC sh
sudo bin/blip -d wlp4s0 | pv > /tmp/output.bin
#+END_SRC
This command captures packets from wlp4s0 (a wireless device),
pipes the output through pv (to display a progress bar) and
writes the extracted data to ~/tmp/output.bin~.

*Example 3*
#+BEGIN_SRC sh
sudo bin/blip -d wlp4s0 -o /tmp/output.bin -f "dst port 80"
#+END_SRC
This command captures packets with a destination equal to port
80, and writes the extracted data to ~/tmp/output.bin~. Any valid [[https://biot.com/capstats/bpf.html][BPF
syntax]] expression should be compatible with the program.

*Example 4*
#+BEGIN_SRC sh
sudo bin/blip -d wlp4s0 -o /tmp/output.bin -l 3
#+END_SRC
This command captures 3 packets from wlp4s0 (a wireless device)
and writes the extracted data to ~/tmp/output.bin~. (A limit of zero
means unlimited capture, which is the default.)

*Example 5*
#+BEGIN_SRC sh
sudo bin/blip -p /tmp/input.pcap -o /tmp/output.bin
#+END_SRC
This command reads packets from the file ~/tmp/input.pcap~ and
writes the extracted data to ~/tmp/output.bin~.
