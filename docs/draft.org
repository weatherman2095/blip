* DESIGN Bid Request Capture Program
** Vision and Approach
As much as possible, the capture tool should be a "nice Unix citizen":
its options, its interface, its error messages, etc. should look and
feel familiar to someone versed in Unix.  The output should go, by
default, to stdout to allow easy piping into another program.  (Though
practicality beats purity; let us not put undue burden on ourselves if
a simpler, though less Unixy, approach exists.)

I highly recommend making something tailored specifically to the task
at hand first, and slowly making the tool more abstract and general
after we have a working prototype.  E.g., we can start by assuming the
destination port (8083) and the HTTP protocol for our captures.

(We should also think about a name that's a bit catchier than just
"bid request capture".)

** Command line interface
#+BEGIN_EXAMPLE
  capture [FLAGS]

  FLAGS:
      -d, --device=DEV      Only capture on DEV
      -n, --limit=NUM       Only capture NUM packets
      -o, --output=FILE     Write to FILE instead of stdout
      -h, --help            Display this help
      -v, --version         Display version
#+END_EXAMPLE

** Output format
| Field    | Length (bytes) | Description                                          |
|----------+----------------+------------------------------------------------------|
| Magic    |              4 | A word to help us identify the beginning of a record |
| Exchange |              4 | The id of the exchange                               |
| Length   |              4 | The number of bytes in the payload                   |
| Type     |              1 | An enum byte determining the type of the Payload     |
| Payload  |              N | The JSON or Protobuf payload                         |

The output format is more complex than I'd like, but in the presence
of Protobuf data, I think it makes sense to treat an output record as
a sequence of bytes rather than as a space-delimited line of
characters.

*** Type Values

| Type      | Value |
|-----------+-------|
| JSON      |     0 |
| Protobuf  |     1 |


** Possible difficulties
- Multi-packet requests :: some requests are too long for one TCP
     packet, and the payload is split.  At first, we can simply ignore
     multi-packet requests.

- Protobuf :: if we only dealt with OpenRTB (JSON), we could do one
     record per line, and delimit fields with a character such as TAB
     (e.g., exchange name and JSON content).  Protobuf throws a wrench
     in that approach since the byte 10 (NL) could be in the request
     and insert newlines when printed out.  This is mainly why a
     slightly more complex output format is required.
